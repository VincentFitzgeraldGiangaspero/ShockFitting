// Copyright (C) 2014 von Karman Institute for Fluid Dynamics, Belgium
//
// This software is distributed under the terms of the
// GNU Lesser General Public License version 3 (LGPLv3).
// See doc/lgpl.txt and doc/gpl.txt for the license text.

#include <iomanip>
#include <sstream>
#include "Framework/StandardShockFittingBeta.hh"
#include "Framework/IOFunctions.hh"
#include "Framework/Log.hh"
#include "Framework/PhysicsData.hh"
#include "Framework/MeshData.hh"
#include "SConfig/ObjectProvider.hh"
#include "SConfig/ConfigFileReader.hh"

#include <ctime>


//--------------------------------------------------------------------------//

using namespace std;
using namespace SConfig;

//--------------------------------------------------------------------------//

namespace ShockFitting {

//--------------------------------------------------------------------------//

// this variable instantiation activates the self-registration mechanism
ObjectProvider<StandardShockFittingBeta, ShockFittingObj>
standardShockFittingBetaProv("StandardShockFittingBeta");

//--------------------------------------------------------------------------//

StandardShockFittingBeta::StandardShockFittingBeta(const std::string& objectName) :
  ShockFittingObj(objectName),
  m_createTetgenFiles(),  // m_createTriangleFiles(),
  m_shockDetector(),
  m_readInputFile1(),
  // m_useCGAL(),
  m_meshBackup(),
  m_readInputFile2(),
  m_bndryNodePtr(),
  m_bndryFacePtr(),
  m_redistrEqShockPoints(),
  m_smoothShockSurf(),
  m_findPhantPoints(),
  m_changeBndryPoints(),
  m_computeNormalVector(),
  m_computeShockLayer(),
  m_fixMeshSpecialPoints(),
  m_writeTetgenFile(),   // triangle
  m_writeTriangleFileFreezedConnect(),
  m_callTetgen(),	// triangle
  m_callTriangleLib(),
  m_identifyMedianDualCell(),
  m_triangleToCFfmt(),
  m_tetgenToCFfmt(),
  m_COOLFluiD(),
  m_CFmeshToTetgen(),
  m_copyZRoe1_0(),
  m_updateSolution(),
  m_fixSpecPoints(),
  m_copyZRoeSh0_1(),
  m_moveShPoints(),
  m_updatePhantPoints(),
  m_redistrShockPoints(),
  m_writeBackTetgenFile(),	//triangle
  m_writeShockInfo(),
  m_computeSFresidual(),
  m_computeHeatFlux(),
  m_meshRestore()
{
  m_version = "dummyVersion";
  addOption("Version",&m_version,
            "Current version of the StandardShockFittingBeta");
  m_resultsDir = "./";
  addOption("ResultsDir",&m_resultsDir,
            "Results directory path");
  m_startFiles = false;
  addOption("startFromCapturedFiles",&m_startFiles,
            "The starting files are the ones from the captured solution");
  m_computeShockFittingResidual = false;
  addOption("shockFittingResidual",&m_computeShockFittingResidual,
            "Specifies if the shock fitting residual will be computed");
  m_needMedianDualCell = false;
  addOption("needMedianDualCell",&m_needMedianDualCell,
            "Specifies if the median duall cells will be defined");
  m_postProHeatFlux = false;
  addOption("heatFluxPostPro",&m_postProHeatFlux,
            "Specifies if the heat flux will be computed");
}

//--------------------------------------------------------------------------//

StandardShockFittingBeta::~StandardShockFittingBeta()
{
}

//--------------------------------------------------------------------------//

void StandardShockFittingBeta::configure(SConfig::OptionMap& cmap,
                                     const std::string& prefix)
{
  LogToScreen(INFO, "StandardShockFittingBeta::configure() => start\n"); // era VERBOSE

  // int start_s_main=clock();

  ShockFittingObj::configure(cmap, prefix);

  LogToScreen(INFO, "StandardShockFittingBeta::configure() => start\n");// era VERBOSE
}

//--------------------------------------------------------------------------//

void StandardShockFittingBeta::setup()
{
  LogToScreen(INFO, "StandardShockFittingBeta::setup() => start\n");	// era VERBOSE

  ShockFittingObj::setup();

  m_createTetgenFiles = m_fConverter[0].ptr(); // m_createTriangleFiles(),
  m_shockDetector = m_sDetector[0].ptr();
  m_readInputFile1 = m_mGenerator[0].ptr();
  m_meshBackup = m_cMaker[0].ptr();
  m_readInputFile2 = m_mGenerator[1].ptr();
  m_bndryNodePtr = m_fRemeshing[0].ptr();
  // m_useCGAL = m_sDetector[1].ptr();
  if(MeshData::getInstance().cellsFreezed()) {
   m_bndryFacePtr = m_fRemeshing[9].ptr(); }
  m_redistrEqShockPoints = m_fRemeshing[1].ptr();
  m_smoothShockSurf = m_fRemeshing[8].ptr();
  m_findPhantPoints = m_fRemeshing[2].ptr();
  m_changeBndryPoints = m_fRemeshing[3].ptr();
  m_computeNormalVector = m_fRemeshing[4].ptr();
  m_computeShockLayer = m_fRemeshing[5].ptr();
  m_fixMeshSpecialPoints = m_fRemeshing[6].ptr();
  m_writeTetgenFile = m_wMesh[0].ptr();		//triangle
  if(MeshData::getInstance().freezedConnectivityOption()) {
   m_writeTriangleFileFreezedConnect = m_wMesh[3].ptr(); }
  m_callTetgen = m_mGenerator[2].ptr();		// triangle
  m_callTriangleLib = m_mGenerator[3].ptr();
  if(m_needMedianDualCell) {
   m_identifyMedianDualCell = m_mGenerator[4].ptr();}
  // m_triangleToCFfmt = m_fConverter[1].ptr();
  m_tetgenToCFfmt = m_fConverter[1].ptr();
  m_COOLFluiD = m_cfdSolver[0].ptr();
  m_CFmeshToTetgen = m_fConverter[2].ptr();
  m_copyZRoe1_0 = m_cMaker[1].ptr();
  m_updateSolution = m_sUpdater[0].ptr();
  m_fixSpecPoints = m_sUpdater[1].ptr();
  m_copyZRoeSh0_1 = m_cMaker[2].ptr();
  m_moveShPoints = m_sUpdater[2].ptr();
  m_updatePhantPoints = m_sUpdater[3].ptr();
  m_redistrShockPoints = m_fRemeshing[7].ptr();
  m_writeBackTetgenFile = m_wMesh[1].ptr();	//triangle
  m_writeShockInfo = m_wMesh[2].ptr();
  m_meshRestore = m_cMaker[3].ptr();
  if(m_computeShockFittingResidual) {
   m_computeSFresidual = m_sUpdater[4].ptr();}
  if(m_postProHeatFlux) {
   m_computeHeatFlux = m_sUpdater[5].ptr();}

  LogToScreen(INFO, "StandardShockFittingBeta::setup() => end\n"); 	// era VERBOSE
}

//--------------------------------------------------------------------------//

void StandardShockFittingBeta::unsetup()
{
  LogToScreen(INFO, "StandardShockFittingBeta::unsetup() => start\n");  // era VERBOSE

  ShockFittingObj::unsetup();

  LogToScreen(INFO, "StandardShockFittingBeta::unsetup() => end\n"); 	// era VERBOSE
}

//--------------------------------------------------------------------------//

void StandardShockFittingBeta::process()
{
  LogToScreen(INFO, "StandardShockFittingBeta::process() => start\n");	// era VERBOSE

  int start_s_main=clock();

  // string for system command execution
  string execmd;

  // current file name
  stringstream* fname = MeshData::getInstance().getData <stringstream> ("FNAME");

  // name of the back file
  string* fnameback = MeshData::getInstance().getData <string> ("FNAMEBACK");

  ostringstream backdir;
  unsigned dummyIstep;



  // set the Shock Fitting version
  MeshData::getInstance().setVersion(m_version);

  // assign the results directory to the MeshData pattern
  MeshData::getInstance().setResultsDir(m_resultsDir);

  // create the results directory
  execmd = "mkdir " + MeshData::getInstance().getResultsDir();
  system(execmd.c_str());

  cout << "\n--------------------- Shock Fitting Solver ----------------------\n\n";
  cout << "_____________________ StandardShockFittingBeta ______________________\n\n";

  cout << "StandardShockFittingBeta.Version = " << m_version << "\n";
  cout << "_________________________________________________________________\n\n";

  cout << "            StandardShockFittingBeta::pre-processing  \n";
  cout << "-----------------------------------------------------------------\n\n";

  cout << "Collecting general Physics informations \n\n";

  PhysicsData::getInstance().getPhysicsInfo()->read();
  PhysicsData::getInstance().getChemicalInfo()->read();
  PhysicsData::getInstance().getReferenceInfo()->read();
  cout << ".................................................\n";

  // the starting TETGEN files are generated from the captured solution.
  // A file format conversion is therefore askedd



if(m_startFiles) {
   cout << "_________________________________________________\n\n";
   cout << "Creating starting SF files from the captured solution \n\n";

   m_createTetgenFiles->convert();

   m_callTetgen->generate(string("na00.poly"));
   cout << ".................................................\n";

     system(string("cp na00.poly na99.poly").c_str());	// mi faccio una copia del poly per ora

  // system(string("mv na00.poly na99.poly").c_str()); // vedi se qua va cambiato o no




}



  cout << "_________________________________________________\n\n";
  cout << "Building the initial computational domain\n\n";


  // read tetgen files
  m_readInputFile1->generate();



  // read file containing informations about shock
 if(!m_startFiles) {
	 m_readInputFile2->generate();
	 m_writeShockInfo->write();
}	// da scommentare dopo lo shockdetector

  m_bndryNodePtr->remesh();	// sistemare dimensione nodptr



  if(MeshData::getInstance().cellsFreezed()) { m_bndryFacePtr->remesh(); }

  if(m_needMedianDualCell) { m_identifyMedianDualCell->generate(); }

  m_meshBackup->copy();



  // locating the shock within the background mesh
  if(m_startFiles) { m_shockDetector->detect(); }


  // Laplacian smooth
  //m_smoothShockSurf->remesh();

  // Redistribution with MMG
  //m_redistrEqShockPoints->remesh();		// redistribute shock_points, per ora non lo faccio


  // m_writeShockInfo->writeShockTecplot(99);


  cout << ".................................................\n";

  cout << "_________________________________________________\n\n";


  cout << "\n-----------------------------------------------------------------";
  cout << "\n-----------------------------------------------------------------\n\n";
  cout << "              StandardShockFittingBeta::starting the time loop   \n";
  cout << "-----------------------------------------------------------------\n";
  cout << "-----------------------------------------------------------------\n\n";

  for(unsigned I=MeshData::getInstance().getnbBegin();
    I<MeshData::getInstance().getnbSteps(); I++) {

   MeshData::getInstance().setIstep(I+1);
   
   cout << "-----------------------------------------------------------------\n \n";
   cout << "              StandardShockFittingBeta::step number => ";
   cout << MeshData::getInstance().getIstep() << "   \n";
   cout << "-----------------------------------------------------------------\n \n";

   if(MeshData::getInstance().getFreezedConnectivity()) {
    cout << ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::";
    cout << "\n (!) StandardShockFittingBeta::warning => freezed connectivity\n";
    cout << ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n\n";
   }

  // m_writeShockInfo->writeShockTecplot(0);


   m_findPhantPoints->remesh();



   //m_changeBndryPoints->remesh(); // m_fRemeshing[3].ptr();

   m_computeNormalVector->remesh(); // m_fRemeshing[4].ptr()


   m_computeShockLayer->remesh();   // m_fRemeshing[5].ptr();


   m_fixMeshSpecialPoints->remesh(); // m_fRemeshing[6].ptr();

  // m_writeShockInfo->writeShockTecplot(1);


   m_writeTetgenFile->write();
   m_callTetgen->generate();



  //  // if the connectivity is not freezed call triangle mesh generator
  //  if(!MeshData::getInstance().getFreezedConnectivity()) {
   //
  //   if      (m_version=="original")  { m_writeTetgenFile->write();
  //                                      m_callTetgen->generate();    }
   //
  //   else if (m_version=="optimized") { m_callTriangleLib->generate(); }
  //  }
   //
  //  // if the connectivity is freezed do not call triangle mesh generator
  //  else if (MeshData::getInstance().getFreezedConnectivity()) {
  //   m_writeTriangleFileFreezedConnect->write();
  //  }



   m_tetgenToCFfmt->convert();  // m_fConverter[1].ptr();



   cout << "_________________________________________________________________\n\n";
  
   m_COOLFluiD->call();
  
   // change COOLFluiD output file name
   if(MeshData::getInstance().getnbProcessors()==1) {
    if(MeshData::getInstance().withP0()) {
     execmd = "cp -f cfout-P0.CFmesh cfout.CFmesh";
     system(execmd.c_str());
     if(system(execmd.c_str())!=0) {
     cout << "StandardShockFittingBeta::error => CFmesh file doesn't exist\n";
     exit(1); }
    }
    if(MeshData::getInstance().withP0()) { execmd = "rm -f cfout-P0.CFmesh";
                                           system(execmd.c_str()); }
   }
   else if (MeshData::getInstance().getnbProcessors()>1) {
    if(MeshData::getInstance().withP0()) {
     execmd = "cp -f cfout-P?.CFmesh cfout.CFmesh";
     system(execmd.c_str());
     if(system(execmd.c_str())!=0) {
      cout << "StandardShockFittingBeta::error => CFmesh file doesn't exist\n";
      exit(1); }
    }
    if(MeshData::getInstance().withP0()) { execmd = "rm -f cfout-P?.CFmesh";
                                           system(execmd.c_str()); }
   }

   cout << "_________________________________________________________________\n\n";

  // m_writeShockInfo->writeShockTecplot(2);

   m_CFmeshToTetgen->convert();

  // m_writeShockInfo->writeShockTecplot(0);

   if  (m_version=="original" )  { m_readInputFile1->generate(); }

   m_copyZRoe1_0->copy();

   m_updateSolution->update();

// m_fixSpecPoints->update();   // no spec points at the moment

   m_copyZRoeSh0_1->copy();



   m_moveShPoints->update();  //sistemare RH prima



   m_updatePhantPoints->update();

//
   if (I>200){
   	if( I-(I/100)*100<2  ) {
   	 m_smoothShockSurf->remesh();
   	 	 std::cout << "      ==>>Smoothing phase: step " << I << "\n"; }
	}

	 
  //    	 m_smoothShockSurf->remesh();

    m_writeShockInfo->writeShockTecplot(1);

   // if the solution must be saved in the I-step, the shock data
   // background grid data are written on output files
   if((I)%MeshData::getInstance().getnbIbak()==0) {
    m_writeBackTetgenFile->write();
    m_writeShockInfo->writeShockTecplot(0);
    m_writeShockInfo->write();
   }


  m_meshRestore->copy();

 //  if(m_computeShockFittingResidual) { m_computeSFresidual->update(); }

//   if(m_postProHeatFlux) {m_computeHeatFlux->update();}

   cout << "_________________________________________________________________\n";

   cout << "_________________________________________________________________\n\n";



   // create the directory to backup files
   backdir.str(string());
   unsigned nbDig=0;
   dummyIstep = I+1;
   while(dummyIstep>0) { dummyIstep/=10; nbDig++; }
   backdir << setw(9-nbDig) << setfill('0') << left << string("step").c_str() << I+1;

   // during the current step the solution will be saved
   if((I)%MeshData::getInstance().getnbIbak()==0) {
    execmd = "mkdir " + backdir.str();
    system(execmd.c_str());

    execmd = "mv -f shocknor.dat sh99.dat shplt* cfout.CFmesh cfin.CFmesh "
             + *fnameback + ".node ";
    if (MeshData::getInstance().getVersion()=="original")
     { execmd = execmd + fname->str() + ".* ";}
    execmd = execmd + backdir.str();
    system(execmd.c_str());

    execmd = "mv cfin*plt " + backdir.str();
    system(execmd.c_str());

    if (MeshData::getInstance().getnbProcessors()==1) {
     execmd = "mv -f cfo*.plt " + backdir.str();
     system(execmd.c_str());
     execmd = "cp Wall* wall-"+backdir.str().substr(4,9)+".plt";
     system(execmd.c_str());
     execmd = "mv heatflux.dat heatflux-"+backdir.str().substr(4,9)+".dat";
     system(execmd.c_str());
     execmd = "mv -f wall*.plt heatflux*.dat " + backdir.str();
     system(execmd.c_str());
    }
    else if (MeshData::getInstance().getnbProcessors()>1) {
     execmd = "rename out cf"+backdir.str().substr(4,9)+" cfout-P?.plt";
     execmd = "mv -f cf*.plt " + backdir.str();
     system(execmd.c_str());
    }

    // mv the step directory in the results directory
    execmd = "mv " + backdir.str() + " " + MeshData::getInstance().getResultsDir();
    system(execmd.c_str());

   } // if the solution must be saved in the current step

   // during the current step the solution wont be saved
   else {
    execmd = "rm -f shocknor.dat ";
    if(MeshData::getInstance().getVersion()=="original" &&
       !MeshData::getInstance().getFreezedConnectivity())
      { execmd = execmd + fname->str() +".* "; }
    system(execmd.c_str());
   }

   execmd = "cut -c1- residual.dat >> " + MeshData::getInstance().getResultsDir();
   execmd = execmd + "/convergence.dat";
   system(execmd.c_str());
  }

  execmd = "rm -rf con* residual.dat states.mesh-0 tree.xml options.dat ";
  system(execmd.c_str());





  cout << "_________________________________________________________________\n";
  cout << "_________________________________________________________________\n";








  LogToScreen(INFO, "StandardShockFittingBeta::process() => end\n");	// era VERBOSE

  int stop_s_main=clock();
  cout << "time: " << (stop_s_main-start_s_main)/double(CLOCKS_PER_SEC)*1000 << endl;
}

//--------------------------------------------------------------------------//

} // namespace ShockFitting
